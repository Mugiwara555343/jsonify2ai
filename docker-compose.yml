services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ${COMPOSE_PROJECT_NAME:-jsonify2ai-main}-qdrant-1
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  web:
    build: ./web
    container_name: ${COMPOSE_PROJECT_NAME:-jsonify2ai-main}-web-1
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8082
    depends_on:
      - api
    restart: unless-stopped

  api:
    build: ./api
    container_name: ${COMPOSE_PROJECT_NAME:-jsonify2ai-main}-api-1
    ports:
      - "${PORT_API:-8082}:8082"
    volumes:
      - ./data:/app/data
    env_file:
      - ./.env
    environment:
      - PORT_API=${PORT_API:-8082}
      - DOCS_DIR=/app/data/documents
      - GIN_MODE=${GIN_MODE:-release}
      - GIN_TRUSTED_PROXIES=${GIN_TRUSTED_PROXIES:-}
    restart: unless-stopped

  worker:
    build: ./worker
    image: jsonify2ai-worker:latest
    ports: ["8090:8090"]
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
      - ./worker:/app/worker           # ← NEW: mount ingest scripts
    env_file:
      - ./.env
    environment:
      QDRANT_URL: "http://host.docker.internal:6333"
      OLLAMA_URL: "http://host.docker.internal:11434"
      EMBED_DEV_MODE: "0"
      IMAGES_CAPTION: ${IMAGES_CAPTION:-0}
      ASK_MODE: ${ASK_MODE}
      ASK_MODEL: ${ASK_MODEL}
      PYTHONPATH: /app            # ← NEW: allow imports like `from app...`
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; d=urllib.request.urlopen('http://localhost:8090/health',timeout=2).read(); sys.exit(0 if b'{\\\"ok\\\":true' in d else 1)"]
      interval: 10s
      timeout: 3s
      retries: 10

volumes:
  qdrant_data:

networks:
  default:
    driver: bridge
