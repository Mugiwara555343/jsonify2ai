name: smoke

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node (optional; lets web build if needed later)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Bring up Qdrant on the host so containers can reach http://host.docker.internal:6333
      - name: Start Qdrant
        run: |
          docker run -d --name qdrant -p 6333:6333 qdrant/qdrant:latest
          # wait for Qdrant
          for i in {1..30}; do
            curl -sf http://localhost:6333/collections && break || sleep 2
          done

      - name: Build worker & api
        run: |
          docker compose build worker api

      - name: Create .env file
        run: |
          cat > .env << 'EOF'
          # External services
          QDRANT_URL=http://localhost:6333
          OLLAMA_URL=http://localhost:11434
          POSTGRES_DSN=

          # Collections / Embeddings
          QDRANT_COLLECTION=jsonify2ai_chunks_768
          QDRANT_COLLECTION_IMAGES=jsonify2ai_images_768
          EMBEDDINGS_MODEL=nomic-embed-text:latest
          EMBEDDING_DIM=768

          # LLM Ask Settings
          ASK_MODE=llm
          ASK_MODEL=qwen2.5:3b-instruct-q4_K_M

          # Dev Toggles (safe defaults)
          EMBED_DEV_MODE=0
          AUDIO_DEV_MODE=1
          STT_MODEL=tiny
          HF_HUB_ENABLE_HF_TRANSFER=0
          HF_HUB_DISABLE_SYMLINKS_WARNING=1
          EOF

      - name: Start worker & api
        run: |
          docker compose up -d worker api
          # wait for API to be healthy (it forwards /status)
          for i in {1..30}; do
            curl -sf http://localhost:8082/status && break || sleep 2
          done

      - name: Python deps for scripts (no-op safety)
        run: |
          pip install -r worker/requirements.txt || true
          pip install requests || true

      - name: Prepare Qdrant indexes
        env:
          QDRANT_URL: http://localhost:6333
          QDRANT_COLLECTION: jsonify2ai_chunks_768
          QDRANT_COLLECTION_IMAGES: jsonify2ai_images_768
        run: |
          python scripts/qdrant_indexes.py

      - name: Ensure required sample files exist
        run: |
          echo "Current working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Creating required directories..."
          mkdir -p data/dropzone/smoke_golden/
          echo "Checking if sample files exist in repository..."
          if [ -f "data/dropzone/smoke_golden/text_sample.md" ]; then
            echo "✓ text_sample.md found in repo"
          else
            echo "✗ text_sample.md missing from repo, creating it..."
            cat > data/dropzone/smoke_golden/text_sample.md << 'EOF'
          This is a golden test sample.
          Line 2: The quick brown fox jumps over the lazy dog.
          Line 3: Lorem ipsum dolor sit amet.
          Line 4: Testing chunking and parsing.
          Line 5: End-to-end validation.
          Line 6: Golden corpus for CI.
          Line 7: Minimal but representative.
          Line 8: Final line.
          EOF
          fi

          if [ -f "data/dropzone/smoke_golden/test.png" ]; then
            echo "✓ test.png found in repo"
          else
            echo "✗ test.png missing from repo, creating placeholder..."
            # Create a simple 1x1 pixel PNG as placeholder
            python3 -c "
          import base64
          # 1x1 transparent PNG
          png_data = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==')
          with open('data/dropzone/smoke_golden/test.png', 'wb') as f:
              f.write(png_data)
          print('Created placeholder test.png')
          "
          fi

          if [ -f "data/dropzone/smoke_golden/sample.pdf" ]; then
            echo "✓ sample.pdf found in repo"
          else
            echo "✗ sample.pdf missing from repo, creating sample..."
            # Create a simple PDF with some text content
            python3 -c "
          from reportlab.pdfgen import canvas
          from reportlab.lib.pagesizes import letter
          import os

          # Create output directory if it doesn't exist
          os.makedirs('data/dropzone/smoke_golden', exist_ok=True)

          # Create a simple PDF
          c = canvas.Canvas('data/dropzone/smoke_golden/sample.pdf', pagesize=letter)
          c.drawString(100, 750, 'Sample PDF for Smoke Testing')
          c.drawString(100, 730, 'This is a test document for CI/CD validation.')
          c.drawString(100, 710, 'Pallet handling and logistics operations.')
          c.drawString(100, 690, 'End-to-end testing with golden samples.')
          c.save()
          print('Created sample.pdf')
          " || echo "Failed to create PDF with reportlab, trying alternative method..."

          # Fallback: create a minimal PDF using a different approach
          if [ ! -f "data/dropzone/smoke_golden/sample.pdf" ]; then
            echo "Creating minimal PDF using alternative method..."
            python3 -c "
          import struct
          # Create a minimal PDF with basic structure
          pdf_content = b'''%PDF-1.4
          1 0 obj
          <<
          /Type /Catalog
          /Pages 2 0 R
          >>
          endobj
          2 0 obj
          <<
          /Type /Pages
          /Kids [3 0 R]
          /Count 1
          >>
          endobj
          3 0 obj
          <<
          /Type /Page
          /Parent 2 0 R
          /MediaBox [0 0 612 792]
          /Contents 4 0 R
          >>
          endobj
          4 0 obj
          <<
          /Length 44
          >>
          stream
          BT
          /F1 12 Tf
          100 700 Td
          (Sample PDF for testing) Tj
          ET
          endstream
          endobj
          xref
          0 5
          0000000000 65535 f
          0000000009 00000 n
          0000000058 00000 n
          0000000115 00000 n
          0000000204 00000 n
          trailer
          <<
          /Size 5
          /Root 1 0 R
          >>
          startxref
          297
          %%EOF'''

          with open('data/dropzone/smoke_golden/sample.pdf', 'wb') as f:
              f.write(pdf_content)
          print('Created minimal sample.pdf')
          "
          fi
          fi

          echo "Final verification:"
          ls -la data/dropzone/smoke_golden/
          test -f data/dropzone/smoke_golden/text_sample.md && echo "✓ text_sample.md exists" || echo "✗ text_sample.md missing"
          test -f data/dropzone/smoke_golden/sample.pdf && echo "✓ sample.pdf exists" || echo "✗ sample.pdf missing"
          test -f data/dropzone/smoke_golden/test.png && echo "✓ test.png exists" || echo "✗ test.png missing"

      - name: Run smoke
        env:
          API_URL: http://localhost:8082
          WORKER_URL: http://localhost:8090
        run: |
          python scripts/smoke_e2e.py

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs api > api.log || true
          docker compose logs worker > worker.log || true
          docker logs qdrant > qdrant.log || true

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            api.log
            worker.log
            qdrant.log
